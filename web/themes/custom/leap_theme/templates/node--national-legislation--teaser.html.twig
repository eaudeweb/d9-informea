{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}
<article{{ attributes.addClass('node-teaser') }}>
    <h5><a class="title" href="{{ url }}" rel="bookmark">{{ label }}</a></h5>

    <div class="origin">
        {{ content.field_date_original_text }}
        {% if  (content.field_date_original_text|render|striptags|trim is not empty) and (content.field_country|render|striptags|trim  is not empty)%}
            |
        {% endif %}
        <div class="country-information">
            {% if node.field_country.0.entity.field_flag.value is not empty %}
                <img src="{{ file_url(node.field_country.0.entity.field_flag.entity.fileuri)}}" class="country-flag"/>
            {% endif %}

            {{ content.field_country }}
        </div>
    </div>

    <div class="informations">
        <span class="content-type">{{ "Legislation" | t }}</span>
        {{ content.field_type_of_text }}
        {% if content.field_ecolex_url and node.field_ecolex_url.uri %}
            <a class="ecolex-link" target="_blank" href="{{ node.field_ecolex_url.uri }}">{{ 'ECOLEX'|t }}</a>
        {% endif %}
        {% if content.field_faolex_url and node.field_faolex_url.uri %}
            <a class="faolex-link" target="_blank" href="{{ node.field_faolex_url.uri }}">{{ 'FAOLEX'|t }}</a>
        {% endif %}
    </div>

    <div class="excerpt">
        {{ content.search_api_excerpt }}
    </div>

    {% if not node.field_leo_tags.isempty and content.field_leo_tags %}
        <div class="keywords">
            <span>{{ 'Keywords:'|t }}</span> {{ content.field_leo_tags }}
        </div>
    {% endif %}

    <div class="more-information">
        {% if content.field_link_url and node.field_link_url.uri %}
            <a href="{{ node.field_link_url.uri }}" rel="bookmark">{{ 'Link to full text'|t }}</a>
        {% endif %}
        {% if  (content.field_attached_files|render|striptags|trim is not empty) and (content.field_link_url|render|striptags|trim  is not empty)%}
            |
        {% endif %}
        {% if (content.field_files|render or content.field_attached_files|render) %}
            <div class="download-documents">
                {% if content.field_attached_files.0['#description'] is not empty %}
                    {{ 'Download:'|t }}
                    <a href="{{ content.field_attached_files.0['#description'] }}" target="_blank">{{ content.field_attached_files.0['#file'].filename.value }}</a>
                {% else %}
                {{ content.field_attached_files }}
                {% endif %}
            </div>
        {% endif %}
    </div>
</article>